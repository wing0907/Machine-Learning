
param_bouns = {'x1' : (-1, 5), # tuple형태, 파라미터의 범위. 딕셔너리 : key & value.
               'x2' : (0, 4)}   

def y_function(x1, x2):                 # 최대값을 찾는 것.
    return -x1 **2 - (x2 -2) **2 +10

# pip install bayesian-optimization    // numpy==1.26.4
from bayes_opt import BayesianOptimization

optimizer = BayesianOptimization(
    f = y_function,   # 함수는 y_function을 쓸거야 // 블랙박스 함수
    pbounds=param_bouns,        # param은 param_bouns를 쓸거야
    random_state=333,
    
)

optimizer.maximize(init_points=5,  # 최대값을 찾아라. 총 25번 돌리라는 얘기
                   n_iter=20)       #가우시안 알고리즘으로 돌리기. target은 y 값
print(optimizer.max)                # gaussian process

# |   iter    |  target   |    x1     |    x2     |
# -------------------------------------------------
# | 1         | 4.0548506 | 2.2597465 | 2.9158029 |
# | 2         | 8.7317592 | -0.898711 | 1.3213552 |
# | 3         | 5.2657804 | 1.2123309 | 0.1932146 |
# | 4         | 7.2681012 | -0.372818 | 0.3897500 |
# | 5         | 7.5449106 | 0.4724198 | 3.4939574 |
# | 6         | 9.4471872 | -0.662166 | 2.3381533 |
# | 7         | 5.0       | -1.0      | 4.0       |
# | 8         | 9.9907600 | 0.0738237 | 1.9384368 |
# | 9         | -19.0     | 5.0       | 0.0       |
# | 10        | 9.3844855 | 0.7561560 | 2.2091468 |
# | 11        | 9.8333766 | 0.0788947 | 2.4004984 |
# | 12        | 9.9429221 | -0.238003 | 1.9792124 |
# | 13        | 9.9889140 | 0.0289013 | 2.1012456 |
# | 14        | 9.9984315 | -0.029963 | 1.9741040 |
# | 15        | 9.9842664 | 0.1171535 | 2.0448170 |
# | 16        | 9.9977906 | -0.030484 | 2.0357774 |
# | 17        | 9.9910658 | -0.019565 | 1.9075266 |
# | 18        | 9.9995629 | -0.014721 | 2.0148430 |
# | 19        | 9.9998161 | -0.009963 | 2.0091953 |
# | 20        | 9.9999273 | -0.006539 | 2.0054650 |
# | 12        | 9.9429221 | -0.238003 | 1.9792124 |
# | 13        | 9.9889140 | 0.0289013 | 2.1012456 |
# | 14        | 9.9984315 | -0.029963 | 1.9741040 |
# | 15        | 9.9842664 | 0.1171535 | 2.0448170 |
# | 16        | 9.9977906 | -0.030484 | 2.0357774 |
# | 17        | 9.9910658 | -0.019565 | 1.9075266 |
# | 18        | 9.9995629 | -0.014721 | 2.0148430 |
# | 12        | 9.9429221 | -0.238003 | 1.9792124 |
# | 13        | 9.9889140 | 0.0289013 | 2.1012456 |
# | 14        | 9.9984315 | -0.029963 | 1.9741040 |
# | 15        | 9.9842664 | 0.1171535 | 2.0448170 |
# | 16        | 9.9977906 | -0.030484 | 2.0357774 |
# | 12        | 9.9429221 | -0.238003 | 1.9792124 |
# | 13        | 9.9889140 | 0.0289013 | 2.1012456 |
# | 14        | 9.9984315 | -0.029963 | 1.9741040 |
# | 12        | 9.9429221 | -0.238003 | 1.9792124 |
# | 12        | 9.9429221 | -0.238003 | 1.9792124 |
# | 13        | 9.9889140 | 0.0289013 | 2.1012456 |
# | 14        | 9.9984315 | -0.029963 | 1.9741040 |
# | 15        | 9.9842664 | 0.1171535 | 2.0448170 |
# | 16        | 9.9977906 | -0.030484 | 2.0357774 |
# | 17        | 9.9910658 | -0.019565 | 1.9075266 |
# | 18        | 9.9995629 | -0.014721 | 2.0148430 |
# | 19        | 9.9998161 | -0.009963 | 2.0091953 |
# | 20        | 9.9999273 | -0.006539 | 2.0054650 |
# | 21        | 9.9999774 | -0.003969 | 2.0026095 |
# | 22        | 9.9999959 | -0.001938 | 2.0005650 |
# | 23        | 9.9999990 | -0.000275 | 1.9990546 |
# | 24        | 9.9999946 | 0.0008796 | 1.9978586 |
# | 25        | 9.9975466 | -0.032794 | 2.0371198 |
# =================================================
# {'target': 9.999999030311658, 'params': {'x1': -0.00027579246465858425, 'x2': 1.999054681610145}}